/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import jsyntaxpane.DefaultSyntaxKit;
import jsyntaxpane.actions.CaretMonitor;
import jsyntaxpane.syntaxkits.JavaSyntaxKit;

/**
 *
 * @author Rum
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    public Frame() {
        initComponents();

        jEditorPanel.setEditorKit(new JavaSyntaxKit());
        DefaultSyntaxKit.initKit();

        jEditorPanel.setContentType("text/java");
        // jComboBox2.setModel(new DefaultComboBoxModel(DefaultSyntaxKit.getContentTypes()));
        // jEdtTest.setContentType(jCmbLangs.getItemAt(0).toString());
        jComboBox2.setSelectedItem("text/java");
        new CaretMonitor(jEditorPanel, jLabel1);
        try {
            // Try to load a relatively big Java file
            loadFile("./target/generated-sources/jflex/jsyntaxpane/lexers/ClojureLexer.java");
        } catch (IOException ex) {
            // This happens when not building from source - ignore
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPanel = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setFloatable(false);

        jButton1.setText("Load File");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        toolBar.add(jButton1);

        jSplitPane2.setDividerLocation(200);
        jSplitPane2.setDividerSize(10);

        jTree.setModel(new FileSystemModel(new File(workspace)));
        jTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTree);

        jSplitPane2.setLeftComponent(jScrollPane3);

        jScrollPane1.setViewportView(jEditorPanel);

        jSplitPane2.setRightComponent(jScrollPane1);

        jLabel1.setText("Current Position");

        jComboBox2.setModel(new DefaultComboBoxModel(DefaultSyntaxKit.getContentTypes()));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jLabel2.setText("Select Lenguage: ");

        jMenu4.setText("Edit");

        jMenu3.setText("File");

        jMenuItem2.setText("Save File");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem1.setText("Load File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem3.setText("Change Workspace");
        jMenu3.add(jMenuItem3);

        jMenu4.add(jMenu3);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 585, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                loadFile(fc.getSelectedFile().getPath());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                loadFile(fc.getSelectedFile().getPath());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String lang = jComboBox2.getSelectedItem().toString();
            classExtention = lang.substring(5);
            if("python".equals(classExtention)) 
                classExtention = "py";
            System.out.println(classExtention);
            // save the state of the current JEditorPane, as it's Document is about
            // to be replaced.
            String oldText = jEditorPanel.getText();

            // install a new DefaultSyntaxKit on the JEditorPane for the requested language.
            
            jEditorPanel.setContentType(lang);
            
            // Recreate the Toolbar
            toolBar.removeAll();
            EditorKit kit = jEditorPanel.getEditorKit();
            
            if (kit instanceof DefaultSyntaxKit) {
                DefaultSyntaxKit defaultSyntaxKit = (DefaultSyntaxKit) kit;
                defaultSyntaxKit.addToolBarActions(jEditorPanel, toolBar);
            }
            toolBar.add(jButton1);
            toolBar.validate();
            try {
                // setText should not be called (read the JavaDocs).  Better use the read
                // method and create a new document:
                // jEdtTest.read(new StringReader(oldText), lang);

                // ... however, the default read() will trigger a call to insertString() for each line
                // of the document which again will a call to parse(), making the UI freeze for large documents.
                // Therefore, for large texts, its best to create a new document and insert the data in
                // a single operation:
                Document doc = kit.createDefaultDocument();
                doc.insertString(0, oldText, null);
                jEditorPanel.setDocument(doc);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        jEditorPanel.requestFocusInWindow();

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeMouseClicked

        try {

            loadFile(jTree.getSelectionPath().toString().replaceAll("[\\[\\]]", "").replace(", ", "\\"));

            // TODO add your handling code here:
        } catch (IOException ex) {
          //  Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTreeMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        FileWriter out;
        try {
            out = new FileWriter(className+"."+classExtention);
            out.write(jEditorPanel.getText());
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void loadFile(String filename) throws IOException {
        // This will load a file:
        // jEdtTest.read(new FileInputStream(filename), null);

        // ... however, the default read() will trigger a call to insertString() for each line
        // of the document which again will a call to parse(), making the UI freeze for large files.
        // Therefore, for large texts, its best to create a new document and insert the data in
        // a single operation:
        Document doc = jEditorPanel.getEditorKit().createDefaultDocument();
        String str = new String(Files.readAllBytes(Paths.get(filename)));
        try {
            doc.insertString(0, str, null);
        } catch (BadLocationException ex) {
            throw new IOException(ex); // Should never happen
        }
        jEditorPanel.setDocument(doc);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    private String workspace = "C:\\Users\\";
    private String className;
    private String classExtention = "java";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JEditorPane jEditorPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTree jTree;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
